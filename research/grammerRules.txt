This file was made to better understand jasmin's rules as well as
have a quick lookup reference for the syntatic rules. The rules
are relatively simple and patterns become recuring.
Some constructs are hard to assert their meaning since the user
guide doesn't mention them or they're overshadowed.

Rules are indicated by fully lowercased words.
Terminals are indicated by uppercased words and, often,
represent their lowercase value.
Lowercased words that start with an uppercase letter are tokens
who's exact definition is not needed, ie: Word, Insn, Integer, etc..
Insn are all the simple accepted instructions by jasmin
Comments are indicated by the token ; and ignore everything until
the end of the line except the \n token


Tokens:
	- SEP // I believe it's the seperator token, aka \n
	- Word: non-keyword word. Used for labels, function names, etc..
	- Integer: number in base 10 or 16, for example: 23, 0xA, etc..
	- Decimal: base 10 number with a decimal portion, ie: 0.12, etc..
	- String: Java string
	- Class_name: Identifies a java class, but can contain info about
		its packages, ie: java/lang/Object, etc..

Rules:

start := 
		source_spec
		class_spec
		super_spec
		implements
		fields
		methods
	;

source_spec :=
		DSOURCE Word{file name} SEP
		| //Nothing
	;

class_spec :=
		DCLASS access Class_name SEP
		| DINTERFACE access Class_name 
	;

access :=
		ABSTRACT
		| FINAL
		| INTERFACE
		| NATIVE
		| PRIVATE
		| PROTECTED
		| PUBLIC
		| STATIC
		| SYNCHRONIZED
		| TRANSIENT
		| VOLATILE
	;

super_spec :=
		DSUPER Class_name SEP
	;

// Implements related rules
implements :=
		implements_list
		| //Nothing
	;

implements_list :=
		implements_list implements_spec
		| implements_spec
	;

implements_spec :=
		DIMPLEMENTS Class_name SEP
	;

// Fields related rules
fields :=
		fields_list
		| //Nothing
	;

fields_list :=
		fields_list fields_spec
		| fields_spec
	;

fields_spec :=
		DFIELDS access String{field name} Word{type descriptor}
		[ EQUALS (String|Integer|Decimal){initial value}
	;

// Method related rules
methods :=
		method_list
		| //Nothing
 	;

method_list :=
		method_list method_spec
		| method_spec
	;

method_spec :=
		defmethod
		(statments)*
		endmethod
	;

defmethod :=
		DMETHOD access Word{method name} SEP
	;

endmethod :=
		DEND METHOD SEP
	;

statments :=
		statments statment
		| statment
	;

statment :=
		stmt SEP
	;

stmt :=
		instruction
		| directive
		| error
		| label
		| //empty
	;

label :=
		Word{label name} COLON
	;

directive :=
		DVAR var_expr
		| DLIMIT limit_expr
		| DLINE line_expr
		| DTHROWS throws_expr
		| DCATCH catch_expr
		| DSET set_expr
	;

var_expr :=
		Integer{number of the variable}
		IS
		Word{new variable name}
		Word{variable type}
		[ FROM Word{start label} TO Word{end label} ]
	;

limit_expr :=
		LOCALS Integer{total amount of local variables}
		| STACK Integer{max stack size}
	;

line_expr :=
		Integer{set line from source code}
	;

throws_expr :=
		Class_name{name of thrown exception}
	;

catch_expr :=
		Class_name{name of catched exception}
		FROM
		Word{label to starting area where exception can be thrown}
		TO
		Word{label to ending area where exception can be thrown}
		USING
		Word{label to jump to in order to handle the exception}
	;

//TODO: research this directive as user guide doesn't provide information
//Parser rules displays the following comment: .set <var> = <var>
set_expr :=
		Word{name}
		(Integer | Word | Num | String)
	;

instruction :=
		simple_instruction
		| complex_instruction
	;

simple_instruction :=
		Insn
		| Insn [ Integer [ Integer ] ]
		| Insn Num
		| Insn Word [ Integer | Word ]
		| Insn String
	;

complex_instruction :=
		LOOKUPSWITCH lookup
		| TABLESWITCH table
	;
// Regular switch, no troubles here
lookup :=
		lookup_args
		lookup_list 
		lookup_default
	;

lookup_args :=
		SEP // For some reason (not mine) this requires a new rule :)
	;

lookup_list :=
		lookup_list lookup_entry
		| lookup_entry
	;

lookup_entry :=
		Integer{case value} COLON Word{label to jump to} SEP
	;

lookup_default :=
		DEFAULT COLON Word{label to jump tp}
	;

//TODO: research tables. They seem similar to the above switch, but with ranges?
table :=
		table_args
		table_list
		table_default
	;

table_args :=
		Integer{low value} [ Integer{high value} ]
	;

table_list :=
		table_list table_entry
		| table_entry
	;

table_entry :=
		Word{label} SEP
	;

table_default :=
		DEFAULT COLON Word{label}
	;
